openapi: 3.0.0
info:
  title: WasaPhoto
  description: |-
    WasaPhoto is a social network where users can upload their pictures and follow friends to see their pictures and interact with them.
  version: 1.0.0
  
servers: 
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Spazio-D/WasaPhoto/1.0.0
  - url: "http://localhost:3000"

security:
  - bearerAuth: [] 

tags:
  - name: "Login"
    description: "About login session"
  - name: "User"
    description: "User's paths and methods"
  - name: "Post"
    description: "Post's paths and methods"

paths:

  #LOGIN
  /session:

    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The username of the user that wants to login
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      security: []
      responses:
        "201":
          description: |-
            A new account has been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthUser" }
              example: { "user_id": 3546, "auth_code": 3546 }
        "200":
          description: |-
            Log-in succesfull.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthUser" }
              example: { "user_id": 245, "auth_code": 245 }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #SET USERNAME
  /users/{user_id}/username:
    parameters:
      - name: user_id
        in: path
        description: The user id
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      summary: Set a new username
      description: |-
        Set a new username for the user with the given user ID.
      operationId: setMyUserName
      requestBody:
        description: New username to set.
        required: true
        content:
          application/json:
            schema:
              description: The new username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
      responses:
        "200":
          description: Set new username successful
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #MAKE POST 
  #GET POST             
  /users/{user_id}/posts:
    parameters:
      - name: user_id
        in: path
        description: The user id
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    post:
      tags: ["Post"]
      description: Upload a photo and create a post.
      summary: Upload a photo and create a post.
      operationId: uploadPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: The image to upload.
              type: object
              properties:
                image: { $ref: "#/components/schemas/Image" }
      responses:
        "201":
          description: Post created successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Resource successfully created"
            multipart/form-data:
              schema:
                description: The post created
                type: object
                properties:
                  post: { $ref: "#/components/schemas/Post" }
                  time: { $ref: "#/components/schemas/TimeStamp" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

    get:
      tags: ["Post"]
      description: Get posts of the user
      summary: Get posts
      operationId: getPosts
      responses:
        "200":
          description: Posts got successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #FOLLOW USER
  #UNFOLLOW USER
  /users/{user_id}/follows/{followed_id}:
    parameters:
      - name: user_id
        in: path
        description: The user id of the user who wants to follow
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: followed_id
        in: path
        description: The user id of the user to be followed
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      summary: Follow a user
      operationId: followUser
      description: The user with user_id start to follow the one with followed_id.
      responses:
        "200":
          description: User followed successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }
        
    delete:
      tags: ["User"]
      summary: Unfollow a user
      operationId: unfollowUser
      description: |-
        The user with user_id no longer follow the one with followed_id.
      responses:
        "200":
          description: User unfollowed successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }
 
  #BAN USER
  #UNBAN USER
  /users/{user_id}/banned/{target_user_id}:
    parameters:
      - name: user_id
        in: path
        description: The user id of the user who wants to ban or unban
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: target_user_id
        in: path
        description: The user id of the target user
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      summary: Ban a user
      operationId: banUser
      description: |-
        The user with user_id ban the one with target_user_id.
      responses:
        "200":
          description: User banned successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

    delete:
      tags: ["User"]
      summary: Unban a user
      operationId: unbanUser
      description: |-
        The user with target_user_id is no longer blocked by the one with user_id
      responses:
        "200":
          description: User unbanned successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #GET USER PROFILE
  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        description: The user id of the user we want to get the profile
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    get:
      tags: ["User"]
      summary: Get a profile
      operationId: getUserProfile
      description: |-
        Visualize the profile of the user with the given id
      responses:
        "200":
          description: Profile got successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Action successfully completed"
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #GET STREAM
  /users/{user_id}/stream:
    parameters:
      - name: user_id
        in: path
        description: The user id of the user we want to get the profile
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    get:
      tags: ["User"]
      summary: Get the personal stream
      operationId: getMyStream
      description: |-
        Visualize the stream of the user, where the stream is the collection of posts of the users followed
      responses:
        "200":
          description: Stream got successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostsList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #LIKE POST
  #UNLIKE POST
  /users/{user_id}/posts/{post_id}/likes/{liker_id}:
    parameters: 
      - name: user_id
        in: path
        description: The user id of the post owner
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id
        schema: { $ref: "#/components/schemas/PostID" }
        required: true
      - name: liker_id
        in: path
        description: The user id of the user who wants to like or unlike the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["Post"]
      summary: Like the post
      operationId: likePhoto
      description: Like a post
      responses:
        "201":
          description: Like added successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Resource successfully created"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

    delete:
      tags: ["Post"]
      summary: Unlike a post
      operationId: unlikePhoto
      description: Unlike the post
      responses:
        "200":
          description: Like removed successfully
          content:
            text/plain:
              schema: 
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #COMMENT POST
  /users/{user_id}/posts/{post_id}/comments:
    parameters: 
      - name: user_id
        in: path
        description: The user id of the post owner
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id
        schema: { $ref: "#/components/schemas/PostID" }
        required: true

    post:
      tags: ["Post"]
      summary: Comment the post
      operationId: commentPhoto
      description: Comment a post
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

    get:
      tags: ["Post"]
      operationId: getComments
      summary: Get a subset or all comments of a post
      description: Get the comments of the post
      responses:
        "200":
          description: Get comments successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentsList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }
    
  #UNCOMMENT POST
  /users/{user_id}/posts/{post_id}/comments/{comment_id}:
    parameters: 
      - name: user_id
        in: path
        description: The user id of the post owner
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id
        schema: { $ref: "#/components/schemas/PostID" }
        required: true
      - name: comment_id
        in: path
        description: The comment id
        schema: { $ref: "#/components/schemas/CommentID" }
        required: true

    delete:
      tags: ["Post"]
      summary: Uncomment a post
      operationId: uncommentPhoto
      description: Uncomment the post
      responses:
        "200":
          description: Comment removed successfully
          content:
            text/plain:
              schema: 
                description: Request success
                type: string
                example: "Action successfully completed"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #DELETE POST
  /users/{user_id}/posts/{post_id}:
    parameters:
      - name: user_id
        in: path
        description: The user id
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id
        schema: { $ref: "#/components/schemas/PostID" }
        required: true

    delete:
      tags: ["Post"]
      description: Delete the post
      summary: Delete a post and the photo.
      operationId: deletePhoto
      responses:
        "200":
          description: Post deleted successfully
          content:
            text/plain:
              schema:
                description: Request success
                type: string
                example: "Resource successfully deleted"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }

  #SEARCH USER
  /users:
    parameters:
      - name: username
        in: query
        required: true
        description: Username to search
        schema: { $ref: "#/components/schemas/Username" }

    get:
      tags: ["User"]
      operationId: searchUsers
      summary: Get the list of profiles
      description: |-
        Get the list of Users that match with the username specified in the query.
      responses:
        "200":
          description: Get the list of profiles of the user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "503": { $ref: "#/components/responses/ServiceUnavailable" }


components:

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
 
  schemas:
    #USER AND PROFILE
    UserID:
      title: UserID
      description: Unique numeric id of the user
      type: integer
      example: 348
      minimum: 0
      maximum: 9999999999999
      readOnly: true
    
    Username:
      title: Username
      description: The username of the user
      type: string
      pattern: ^\w{3,16}$
      example: "Spazio_99"
      minLength: 3
      maxLength: 16
    
    User:
      title: User
      description: A user
      type: object
      properties:
        user_id: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
    
    Profile:
      title: Profile
      description: The profile of the user with all his post and other info
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        followers_count:
          description: Number of user that follow this profile
          type: integer
          example: 126
          minimum: 0
          maximum: 99999999999
        followed_count: 
          description: Number of profile followed by this profile
          type: integer
          example: 33
          minimum: 0
          maximum: 99999999999
        post_count:
          description: Number of post of this profile
          type: integer
          example: 27
          minimum: 0
          maximum: 99999999999
        follow_check:
          type: boolean
          description: True if the user is followed by the logged user
          example: true

    UsersList:
      title: UserList
      description: List of users
      type: array
      items: { $ref: "#/components/schemas/User" }
      minItems: 0
      maxItems: 9999

    #TIMESTAMP
    TimeStamp:
      title: TimeStamp
      description: Describe a time in the YY-MM-DD HH:MM:SS format
      type: string
      format: date-time
      pattern: ^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$
      example: "2023-11-12T14:59:37Z"
      minLength: 20
      maxLength: 20

    #POST AND IMAGE  
    PostID:
      title: PostID
      description: Unique numeric id of the post
      type: integer
      example: 41
      minimum: 0
      maximum: 99999999
      readOnly: true

    Image:
      title: Image
      description: A image represented in base64
      type: string
      format: byte
      minLength: 0
      maxLength: 1000000000  

    Post:
      title: Post
      description: A pubblication of a picture of a user on his own profile
      type: object
      properties:
        image: { $ref: "#/components/schemas/Image" }
        post_id: { $ref: "#/components/schemas/PostID" }
        likes_count:
          description: Number of likes of the post
          type: integer
          example: 69
          minimum: 0
          maximum: 99999999999
        comments_count: 
          description: Number of comments of the post
          type: integer
          example: 666
          minimum: 0
          maximum: 99999999999
        like_check:
          type: boolean
          description: True if the post is liked by the logged user
          example: true
        timestamp: { $ref: "#/components/schemas/TimeStamp" }
    
    PostsList:
      title: PostsList
      description: List of posts
      type: array
      items: { $ref: "#/components/schemas/Post" }
      minItems: 0
      maxItems: 9999999
    
    #COMMENT
    CommentID:
      title: CommentID
      description: The numeric id of the comment for a post
      type: integer
      example: 58
      minimum: 1
      maximum: 9999999
      readOnly: true

    Comment:
      title: Comment
      description: Comment of the post
      type: object
      properties:
        comment_id: { $ref: "#/components/schemas/CommentID" }
        owner_id: { $ref: "#/components/schemas/UserID" }
        user: { $ref: "#/components/schemas/User" }
        text:
          type: string
          description: Text of the comment of max 999 characters
          example: "Yoo! I'm in love with this photo!"
          pattern: "^.{1,999}$"
          minLength: 1
          maxLength: 999
        timestamp: { $ref: "#/components/schemas/TimeStamp" }
    
    CommentsList:
      title: CommentList
      description: The list of comments of a post
      type: array
      items: { $ref: "#/components/schemas/Comment" }
      minItems: 0
      maxItems: 99999

    #AUTHORIZATION
    AuthUser:
      title: AuthUser
      description: The authorization code for a user is his user_id.
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        auth_code: 
          title: AuthCode
          description: The authorization code for a user is his user_id.
          type: integer
          example: 35498
          minimum: 1
          maximum: 9999999999999
      example: { "user_id": 5370, "auth_code": 5370 }

  responses:

    #400
    BadRequest:
      description: |-
        The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptiverequest routing).
      content:
        text/plain:
          schema:
            description: Bad Request
            type: string
            example: "Bad Request, maybe sintax error"
            minLength: 5
            maxLength: 100

    #401
    Unauthorized:
      description: |-
            Used when authentication is required and has failed or has not yet been provided. Semantically means "unauthorised", the user does not have valid authentication credentials for the target resource.
      content:
        text/plain:
          schema:
            description: Unauthorized
            type: string
            example: "Unauthorized"
            minLength: 5
            maxLength: 100

    #403
    Forbidden:
      description: |-
        The request contained valid data and was understood by the server, but the server is refusing action. This may be due to the user not having the necessary permissions for a resource or needing an account of some sort, or attempting a prohibited action (e.g. creating a duplicate record where only one is allowed).
      content:
        text/plain:
          schema:
            description: Forbidden
            type: string
            example: "Forbidden"
            minLength: 5
            maxLength: 100

    #500
    InternalServerError:
      description: |-
        A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.
      content:
        text/plain:
          schema:
            description: Internal Server Error
            type: string
            example: "Internal Server Error"
            minLength: 5
            maxLength: 100

    #503
    ServiceUnavailable:
      description: |-
        The server cannot handle the request (because it is overloaded or down for maintenance). Generally, this is a temporary state.      
      content:
        text/plain:
          schema:
            description: Service Unavailable
            type: string
            example: "Service Unavailable"
            minLength: 5
            maxLength: 100